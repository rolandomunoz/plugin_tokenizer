#This procedures add functions to the Strings object. These are necessary for the tokenizer.
#@strings.sort_by_nchars: 0
#@strings.get_string_var: " "
#writeInfoLine: strings.get_string_var.return$
#example$ = "Lucas, Juana, Perro."
#@strings.create_Strings_from: example$, ",|\."

procedure strings.create_Strings_from: .string_var$, .separator_regex$
    # Store in Strings the elements of a string_variable. The string variable is splitted by the separator characters.
    ## Input: string_variable
    ## Output: Strings object
    ## Args:
    ### .separator_regex$ is the char that separates the strings that come in the string_variable.
    .string_var$ = replace_regex$(.string_var$, .separator_regex$, " ", 0)
    Create Strings as tokens: .string_var$
endproc

procedure strings.get_string_var: .separator$
    # Store in a string variable all the elements of a String object. Strings are separated by a separator characters.
    ## Input: Strings object
    ## Output: string variable
    ## Args:
    ### .separator$ is the char that separates the strings that come from Strings object.

    .nStrings = Get number of strings
    .string_var$ = ""
    for .iString to .nStrings
        .string$ = Get string: .iString
        .string_var$ = .string_var$ + .string$ + .separator$ 
    endfor
    .return$ = .string_var$ - .separator$
endproc

procedure strings.sort_by_nchars: .a_z
    # Organize strings inside a Strings object based on their number of characters and the english alphabet order
    ## Input: Strings object
    ## Output: Strings object
    ## Args:
    ### .a-z is a boolean, so it can take 1 or 0
    
    .stID = selected("Strings")

    #Organize strings in a table object
    @strings.create_table_of_string_length: 
    .tbID = selected("Table")
    selectObject: .tbID
    Sort rows: "length string"
    if not .a_z
        Reflect rows
    endif
    
    #Puts this strings separated by spaces into a string variable 
    nRows = Object_'.tbID'.nrow
    .string_var$ = ""
    for iRow to nRows
        .string$ = Object_'.tbID'$[iRow,"string"]
        .string_var$ = .string_var$ + .string$ + " "
    endfor
    
    #Erase old objects
    removeObject: .tbID
    
    #Create a new Strings object
    .return = Create Strings as tokens: .string_var$
endproc

procedure strings.create_table_of_string_length
    # Stored Strings object information in a Table object. A second column is append to the table, this contains the number of characters of each string 
    ## Input: Strings object
    ## Output: Table object
    ## Table Atributes
    ## The table columns are "string" and "length" by default
    
    .stID = selected("Strings")
    .tbID = Create Table with column names: "table", 0, "string length"
    selectObject: .stID    
    .nStrings = Get number of strings
    for .iString to .nStrings
        #Get strings and their length 
        selectObject: .stID
        .string$ = Get string: .iString
        .string_length = length(.string$)
        
        #Fill the Table with string information
        selectObject: .tbID
        Append row
        row = Object_'.tbID'.nrow
        Set string value: row, "string", .string$
        Set numeric value: row, "length", .string_length
    endfor
    selectObject: .tbID
    .return = .tbID
endproc
